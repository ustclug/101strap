#!/bin/bash

set -e

chdo() {
    chroot "$ROOT" "$@"
}

enserv() {
    chroot "$ROOT" systemctl enable "$@"
}

inspkg() {
    DEBIAN_FRONTEND=noninteractive chroot "$ROOT" apt-get install --no-install-recommends --yes "$@"
}

cleanup() {
    if [ -n "$DEBUG" ]; then
        echo "Quit this bash if this is a successful run, to avoid filesystem integrity issues"
        /bin/bash
    fi
    umount "$ROOT/proc" || true
    umount "$ROOT/sys" || true
    umount "$ROOT/dev" || true
    umount "$EFI" || true
    umount "$ROOT" || true
    losetup --detach "$LODEV" || true
}
trap cleanup EXIT

WORKSPACE="/target"
USER="ustc"
PASSWORD="ustc"

if [ ! -d "$WORKSPACE" ]; then
    echo "$WORKSPACE is not a directory."
    exit 1
elif [ "$(id -u)" -ne 0 ]; then
    echo "You are not root!"
    exit 1
fi

# Create image file, EFI got 256M, and rootfs got remaining space
truncate -s 5G "$WORKSPACE"/root.img
parted --script -a optimal "$WORKSPACE"/root.img mklabel gpt mkpart '"EFI System"' fat32 0% 256M set 1 esp on mkpart '"Linux system"' ext4 256M 100%

# Mount image file
LODEV=$(losetup --find --show --partscan "$WORKSPACE"/root.img)
# Linux does not support device isolation (namespace), so you need to bind your /dev/ or mount devtmpfs to continue
EFIPART="$LODEV"p1
ROOTPART="$LODEV"p2

# Sanity check. TODO: automatically calc the real partition size
if [ "$(blockdev --getsize64 "$EFIPART")" != 254803968 ]; then
    echo "Sanity check failed: EFI size unexpected"
    losetup --detach "$LODEV"
    exit 1
fi
if [ "$(blockdev --getsize64 "$ROOTPART")" != 5111808000 ]; then
    echo "Sanity check failed: rootfs size unexpected"
    losetup --detach "$LODEV"
    exit 1
fi

# Format
mkfs.fat -nEFI -F32 "$EFIPART"
mkfs.ext4 -I 256 -L "Linux system" -M / "$ROOTPART"

# Mount EFI partition and rootfs
EFI="/mnt/rootfs/boot/efi"
ROOT="/mnt/rootfs"
mkdir -p "$ROOT"
mount "$ROOTPART" "$ROOT"
mkdir -p "$EFI"
mount "$EFIPART" "$EFI"

debootstrap jammy "$ROOT" http://mirrors.ustc.edu.cn/ubuntu/
mount proc "$ROOT/proc" -t proc
mount sysfs "$ROOT/sys" -t sysfs
mount --rbind /dev "$ROOT/dev"

# Fill the blank space with 0
cat "/dev/zero" > "$ROOT/zero.fill" || true
sync
rm $ROOT/zero.fill

# Cleanup
chdo apt autoremove -y && apt clean
rm -rf "$ROOT/var/cache"/*

